# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend.models.base_model_ import Model
from backend import util
from backend import db


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """
    __tablename__ = "invoices"
    _customer_id = db.Column(db.Integer, db.ForeignKey("customer._id"))
    _customer = db.relationship("customers", back_populates="_invoices")
    _month = db.Column(db.Integer)
    _id = db.Column(db.Integer, primary_key=True)
    _date = db.Column(db.String(100))
    _sent = db.Column(db.Boolean)
    _items = db.relationship("invoice_items", back_populates="_invoice")
    # address, total

    def __init__(self, customer_id=None,  month=None, id=None, date=None, sent=False):  # noqa: E501
        """Invoice - a model defined in OpenAPI

        :param customer_id: The customer_id of this Invoice.  # noqa: E501
        :type customer_id: int
        :param address: The address of this Invoice.  # noqa: E501
        :type address: str
        :param month: The month of this Invoice.  # noqa: E501
        :type month: int
        :param id: The id of this Invoice.  # noqa: E501
        :type id: int
        :param date: The date of this Invoice.  # noqa: E501
        :type date: str
        :param total: The total of this Invoice.  # noqa: E501
        :type total: float
        :param sent: The sent of this Invoice.  # noqa: E501
        :type sent: bool
        :param items: The items of this Invoice.  # noqa: E501
        :type items: List[InvoiceItem]
        """
        self.openapi_types = {
            'customer_id': int,
            'address': str,
            'month': int,
            'id': int,
            'date': str,
            'total': float,
            'sent': bool,
            'items': List[InvoiceItem]
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'address': 'address',
            'month': 'month',
            'id': '_id',
            'date': 'date',
            'total': 'total',
            'sent': 'sent',
            'items': 'items'
        }

        self._customer_id = customer_id

        self._month = month
        self._id = id
        self._date = date

        self._sent = sent

    @classmethod
    def from_dict(cls, dikt) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Invoice of this Invoice.  # noqa: E501
        :rtype: Invoice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this Invoice.


        :return: The customer_id of this Invoice.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Invoice.


        :param customer_id: The customer_id of this Invoice.
        :type customer_id: int
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def address(self):
        """Gets the address of this Invoice.


        :return: The address of this Invoice.
        :rtype: str
        """
        return "{}\n{} {}".format(self._customer.street, self._customer.zip, self._customer.city)

    @property
    def month(self):
        """Gets the month of this Invoice.


        :return: The month of this Invoice.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this Invoice.


        :param month: The month of this Invoice.
        :type month: int
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501
        if month is not None and month > 12:  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value less than or equal to `12`")  # noqa: E501
        if month is not None and month < 1:  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value greater than or equal to `1`")  # noqa: E501

        self._month = month

    @property
    def id(self):
        """Gets the id of this Invoice.


        :return: The id of this Invoice.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.


        :param id: The id of this Invoice.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date(self):
        """Gets the date of this Invoice.


        :return: The date of this Invoice.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Invoice.


        :param date: The date of this Invoice.
        :type date: str
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def total(self):
        """Gets the total of this Invoice.


        :return: The total of this Invoice.
        :rtype: float
        """
        return sum((item.amount * item.price) for item in self._items)

    @property
    def sent(self):
        """Gets the sent of this Invoice.


        :return: The sent of this Invoice.
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this Invoice.


        :param sent: The sent of this Invoice.
        :type sent: bool
        """
        if sent is None:
            raise ValueError("Invalid value for `sent`, must not be `None`")  # noqa: E501

        self._sent = sent

    @property
    def items(self):
        """Gets the items of this Invoice.


        :return: The items of this Invoice.
        :rtype: List[InvoiceItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Invoice.


        :param items: The items of this Invoice.
        :type items: List[InvoiceItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items


class Customer(Model, db.Model):
    _id = db.Column(db.Integer, primary_key=True)
    _firstname = db.Column(db.String(100))
    _lastname = db.Column(db.String(100))
    _street = db.Column(db.String(100))
    _zip = db.Column(db.String(20))
    _city = db.Column(db.String(100))
    _email = db.Column(db.String(100))
    _invoices = db.relationship("Invoice", back_populates="_customer")
    _default_price = db.Column(db.Float)

    def __init__(self, id=None, firstname=None, lastname=None, street=None, zip=None, city=None, email=None, default_price=80.0):  # noqa: E501
        """Customer - a model defined in OpenAPI

        :param id: The id of this Customer.  # noqa: E501
        :type id: int
        :param firstname: The firstname of this Customer.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this Customer.  # noqa: E501
        :type lastname: str
        :param street: The street of this Customer.  # noqa: E501
        :type street: str
        :param zip: The zip of this Customer.  # noqa: E501
        :type zip: str
        :param city: The city of this Customer.  # noqa: E501
        :type city: str
        :param email: The email of this Customer.  # noqa: E501
        :type email: str
        """
        self.openapi_types = {
            'id': int,
            'firstname': str,
            'lastname': str,
            'street': str,
            'zip': str,
            'city': str,
            'email': str,
            'defaultPrice': float
        }

        self.attribute_map = {
            'id': '_id',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'street': 'street',
            'zip': 'zip',
            'city': 'city',
            'email': 'email',
            'defaultPrice': 'default_price'
        }

        self._id = id
        self._firstname = firstname
        self._lastname = lastname
        self._street = street
        self._zip = zip
        self._city = city
        self._email = email
        self._default_price = default_price

    @classmethod
    def from_dict(cls, dikt) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Customer of this Customer.  # noqa: E501
        :rtype: Customer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Customer.


        :return: The id of this Customer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.


        :param id: The id of this Customer.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def defaultPrice(self):
        """Gets the default_price of this Customer.


        :return: The default price of this Customer.
        :rtype: float
        """
        return self._default_price

    @id.setter
    def defaultPrice(self, default_price):
        """Sets the id of this Customer.


        :param default_price: The id of this Customer.
        :type default_price: float
        """
        if id is None:
            raise ValueError("Invalid value for `default Price`, must not be `None`")  # noqa: E501

        self._default_price = default_price

    @property
    def firstname(self):
        """Gets the firstname of this Customer.


        :return: The firstname of this Customer.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this Customer.


        :param firstname: The firstname of this Customer.
        :type firstname: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this Customer.


        :return: The lastname of this Customer.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this Customer.


        :param lastname: The lastname of this Customer.
        :type lastname: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def street(self):
        """Gets the street of this Customer.


        :return: The street of this Customer.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Customer.


        :param street: The street of this Customer.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def zip(self):
        """Gets the zip of this Customer.


        :return: The zip of this Customer.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Customer.


        :param zip: The zip of this Customer.
        :type zip: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")  # noqa: E501

        self._zip = zip

    @property
    def city(self):
        """Gets the city of this Customer.


        :return: The city of this Customer.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Customer.


        :param city: The city of this Customer.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def email(self):
        """Gets the email of this Customer.


        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.


        :param email: The email of this Customer.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email


class InvoiceItem(Model, db.Model):
    __tablename__ = "invoice_items"
    _pos = db.Column(db.Integer, primary_key=True)
    _description = db.Column(db.String(100))
    _amount = db.Column(db.Integer)
    _price = db.Column(db.Float)
    _invoice_id = db.Column(db.Integer, db.ForeignKey("invoice._id"))
    _invoice = db.relationship("invoices", back_populates="_items")

    def __init__(self, pos=None, description=None, amount=None, price=None):  # noqa: E501
        """InvoiceItem - a model defined in OpenAPI

        :param pos: The pos of this InvoiceItem.  # noqa: E501
        :type pos: int
        :param description: The description of this InvoiceItem.  # noqa: E501
        :type description: str
        :param amount: The amount of this InvoiceItem.  # noqa: E501
        :type amount: int
        :param price: The price of this InvoiceItem.  # noqa: E501
        :type price: float
        """
        self.openapi_types = {
            'pos': int,
            'description': str,
            'amount': int,
            'price': float
        }

        self.attribute_map = {
            'pos': 'pos',
            'description': 'description',
            'amount': 'amount',
            'price': 'price'
        }

        self._pos = pos
        self._description = description
        self._amount = amount
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'InvoiceItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InvoiceItem of this InvoiceItem.  # noqa: E501
        :rtype: InvoiceItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pos(self):
        """Gets the pos of this InvoiceItem.


        :return: The pos of this InvoiceItem.
        :rtype: int
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this InvoiceItem.


        :param pos: The pos of this InvoiceItem.
        :type pos: int
        """
        if pos is None:
            raise ValueError("Invalid value for `pos`, must not be `None`")  # noqa: E501

        self._pos = pos

    @property
    def description(self):
        """Gets the description of this InvoiceItem.


        :return: The description of this InvoiceItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItem.


        :param description: The description of this InvoiceItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this InvoiceItem.


        :return: The amount of this InvoiceItem.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceItem.


        :param amount: The amount of this InvoiceItem.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def price(self):
        """Gets the price of this InvoiceItem.


        :return: The price of this InvoiceItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InvoiceItem.


        :param price: The price of this InvoiceItem.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price
