# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend.models.base_model_ import Model
from backend.models.invoice_item import InvoiceItem
from backend import util
from backend import db


class Invoice(Model, db.Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """
    __tablename__ = "invoices"
    _customer_id = db.Column(db.Integer, db.ForeignKey("customers._id"))
    _customer = db.relationship("Customer", back_populates="_invoices")
    _month = db.Column(db.Integer)
    _id = db.Column(db.Integer, primary_key=True)
    _date = db.Column(db.String(100))
    _sent = db.Column(db.Boolean)
    _items = db.relationship("InvoiceItem", back_populates="_invoice")
    # address, total

    def __init__(self, customer_id=None,  month=None,  date=None, sent=False):  # noqa: E501
        """Invoice - a model defined in OpenAPI

        :param customer_id: The customer_id of this Invoice.  # noqa: E501
        :type customer_id: int
        :param address: The address of this Invoice.  # noqa: E501
        :type address: str
        :param month: The month of this Invoice.  # noqa: E501
        :type month: int
        :param id: The id of this Invoice.  # noqa: E501
        :type id: int
        :param date: The date of this Invoice.  # noqa: E501
        :type date: str
        :param total: The total of this Invoice.  # noqa: E501
        :type total: float
        :param sent: The sent of this Invoice.  # noqa: E501
        :type sent: bool
        :param items: The items of this Invoice.  # noqa: E501
        :type items: List[InvoiceItem]
        """
        self.openapi_types = {
            'customer_id': int,
            'address': str,
            'month': int,
            'id': int,
            'date': str,
            'total': float,
            'sent': bool,
            'items': List[InvoiceItem]
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'address': 'address',
            'month': 'month',
            'id': '_id',
            'date': 'date',
            'total': 'total',
            'sent': 'sent',
            'items': 'items'
        }

        self._customer_id = customer_id

        self._month = month

        self._date = date

        self._sent = sent

    @classmethod
    def from_dict(cls, dikt) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Invoice of this Invoice.  # noqa: E501
        :rtype: Invoice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this Invoice.


        :return: The customer_id of this Invoice.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Invoice.


        :param customer_id: The customer_id of this Invoice.
        :type customer_id: int
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def address(self):
        """Gets the address of this Invoice.


        :return: The address of this Invoice.
        :rtype: str
        """
        comp = self._customer.company
        if comp != "":
            comp = "{}\n".format(comp)
        return "{}\n{} {}\n{}\n{} {}".format(comp, self._customer.firstname, self._customer.lastname, self._customer.street, self._customer.zip, self._customer.city)

    @property
    def month(self):
        """Gets the month of this Invoice.


        :return: The month of this Invoice.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this Invoice.


        :param month: The month of this Invoice.
        :type month: int
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501
        if month is not None and month > 12:  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value less than or equal to `12`")  # noqa: E501
        if month is not None and month < 1:  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value greater than or equal to `1`")  # noqa: E501

        self._month = month

    @property
    def id(self):
        """Gets the id of this Invoice.


        :return: The id of this Invoice.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.


        :param id: The id of this Invoice.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date(self):
        """Gets the date of this Invoice.


        :return: The date of this Invoice.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Invoice.


        :param date: The date of this Invoice.
        :type date: str
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def total(self):
        """Gets the total of this Invoice.


        :return: The total of this Invoice.
        :rtype: float
        """
        return sum((item.amount * item.price) for item in self._items)

    @property
    def sent(self):
        """Gets the sent of this Invoice.


        :return: The sent of this Invoice.
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this Invoice.


        :param sent: The sent of this Invoice.
        :type sent: bool
        """
        if sent is None:
            raise ValueError("Invalid value for `sent`, must not be `None`")  # noqa: E501

        self._sent = sent

    @property
    def items(self):
        """Gets the items of this Invoice.


        :return: The items of this Invoice.
        :rtype: List[InvoiceItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Invoice.


        :param items: The items of this Invoice.
        :type items: List[InvoiceItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items
